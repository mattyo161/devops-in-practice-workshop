#!/usr/bin/env python
from gomatic import *
import os, re

print "Updating PetClinic Pipeline..."
go_server_host = re.search('https?://([a-z0-9.\-._~%]+)', os.environ['GO_SERVER_URL']).group(1)
go_server_url = "%s:%s" % (go_server_host, "8153")
configurator = GoCdConfigurator(HostRestClient(go_server_url))
secret_variables = {'GCLOUD_SERVICE_KEY': 'AES:+3KBS97MXplXyFRqGAOkvQ==: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'}
pipeline = configurator\
	.ensure_pipeline_group("sample")\
	.ensure_replacement_of_pipeline("PetClinic")\
	.set_git_material(GitMaterial("https://github.com/mattyo161/devops-in-practice-workshop.git", branch="master", ignore_patterns=set(['pipelines/*']), shallow="True")).ensure_environment_variables({'GCLOUD_ZONE': 'us-east1-b', 'GCLOUD_PROJECT_ID': 'devops-workshop-221503', 'GCLOUD_CLUSTER': 'devops-workshop-gke'}).ensure_encrypted_environment_variables({'GCLOUD_SERVICE_KEY': secret_variables})
stage = pipeline.ensure_stage("commit")
job = stage.ensure_job("build-and-publish").ensure_environment_variables({'MAVEN_OPTS': '-Xmx1024m'}).ensure_encrypted_environment_variables({}).set_elastic_profile_id("docker-jdk")
job.add_task(ExecTask(['./mvnw', 'clean package']))
job.add_task(ExecTask(['bash', '-c', 'docker build --tag pet-app:$GO_PIPELINE_LABEL --build-arg JAR_FILE=target/spring-petclinic-2.0.0.BUILD-SNAPSHOT.jar .']))
job.add_task(ExecTask(['bash', '-c', 'docker login -u _json_key -p"$(echo $GCLOUD_SERVICE_KEY | base64 -d)" https://us.gcr.io']))
job.add_task(ExecTask(['bash', '-c', 'docker tag pet-app:$GO_PIPELINE_LABEL us.gcr.io/$GCLOUD_PROJECT_ID/pet-app:$GO_PIPELINE_LABEL']))
job.add_task(ExecTask(['bash', '-c', 'docker push us.gcr.io/$GCLOUD_PROJECT_ID/pet-app:$GO_PIPELINE_LABEL']))
stage = pipeline.ensure_stage("deploy")
job = stage.ensure_job("deploy").set_elastic_profile_id("kubectl")
job.add_task(ExecTask(['bash', '-c', 'echo $GCLOUD_SERVICE_KEY | base64 -d > secret.json && chmod 600 secret.json']))
job.add_task(ExecTask(['bash', '-c', 'gcloud auth activate-service-account --key-file secret.json']))
job.add_task(ExecTask(['bash', '-c', 'gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone $GCLOUD_ZONE --project $GCLOUD_PROJECT_ID']))
job.add_task(ExecTask(['bash', '-c', './deploy-gcloud.sh']))
job.add_task(ExecTask(['bash', '-c', 'rm secret.json']))

configurator.save_updated_config()